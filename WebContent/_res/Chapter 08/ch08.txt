chapter: Geolocation
==================
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.js"></script>
    
    
====================================
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.js"></script>
<script>window.jQuery || document.write("<script
    src='js/libs/jquery-1.6.4.min.js'>\x3C/script>")</script>
    
    
====================================
<input type="button" id="go" value="Click Me To View Your Location" />
    
    
====================================
<script>
$(document).ready(function () {
    // wire up button click
    $('#go').click(function () {
        // test for presence of geolocation
        if (navigator && navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(geo_success, geo_error);
        } else {
            error('Geolocation is not supported.');
        }
    });
});

function geo_success(position) {
    printLatLong(position.coords.latitude, position.coords.longitude);
}

// The PositionError object returned contains the following attributes:
// code: a numeric response code
// PERMISSION_DENIED = 1
// POSITION_UNAVAILABLE = 2
// TIMEOUT = 3
// message: Primarily for debugging. It's recommended not to show this error
// to users.
function geo_error(err) {
    if (err.code == 1) {
        error('The user denied the request for location information.')
    } else if (err.code == 2) {
        error('Your location information is unavailable.')
    } else if (err.code == 3) {
        error('The request to get your location timed out.')
    } else {
        error('An unknown error occurred while requesting your location.')
    }
}

// output lat and long
function printLatLong(lat, long) {
    $('body').append('<p>Lat: ' + lat + '</p>');
    $('body').append('<p>Long: ' + long + '</p>');
}

function error(msg) {
    alert(msg);
}
</script>
    
    
====================================
if (navigator && navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(geo_success, geo_error);
} else {
    error('Geolocation is not supported.');
}
    
    
====================================
function printLatLong(lat, long) {
    $('body').append('<p>Lat: ' + lat + '</p>');
    $('body').append('<p>Long: ' + long + '</p>');
}
    
    
====================================
<script src="http://j.maxmind.com/app/geoip.js"></script>
    
    
====================================
$(document).ready(function () {
    // wire up button click
    $('#go').click(function () {
        // test for presence of geolocation
        if (navigator && navigator.geolocation) {
            // make the request for the user's position
            navigator.geolocation.getCurrentPosition(geo_success, geo_error);
        } else {
            // use MaxMind IP to location API fallback
            printLatLong(geoip_latitude(), geoip_longitude(), true);
        }
    });
});

// output lat and long
function printLatLong(latitude, longitude, isMaxMind) {
    $('body').append('<p>Lat: ' + latitude + '</p>');
    $('body').append('<p>Long: ' + longitude + '</p>');
    // if we used MaxMind for location, add attribution link
    if (isMaxMind) {
        $('body').append('<p><a href="http://www.maxmind.com" target="_blank">IP
            to Location Service Provided by MaxMind</a></p>');
    }
}

function geo_error(err) {
    // instead of displaying an error, fall back to MaxMind IP to location library
    printLatLong(geoip_latitude(), geoip_longitude(), true);
}
    
    
====================================
function printLatLong(latitude, longitude, isMaxMind) {
    $('body').append('<p>Lat: ' + latitude + '</p>');
    $('body').append('<p>Long: ' + longitude + '</p>');
    // if we used MaxMind for location, add attribution link
    if (isMaxMind) {
        $('body').append('<p><a href="http://www.maxmind.com" target="_blank">IP
            to Location Service Provided by MaxMind</a></p>');
    }
}
    
    
====================================
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.js">
</script>
<script src="http://j.maxmind.com/app/geoip.js"></script>
<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    
    
====================================
<input type="button" id="go" value="Click Me To Find Your Address" />
    
    
====================================
$(document).ready(function () {

    // wire up button click
    $('#go').click(function () {
        // test for presence of geolocation
        if (navigator && navigator.geolocation) {
            // make the request for the user's position
            navigator.geolocation.getCurrentPosition(geo_success, geo_error);
        } else {
            // use MaxMind IP to location API fallback
            printAddress(geoip_latitude(), geoip_longitude(), true);
        }
    });


function geo_success(position) {
    printAddress(position.coords.latitude, position.coords.longitude);
}

function geo_error(err) {
    // instead of displaying an error, fall back to MaxMind IP to location library
    printAddress(geoip_latitude(), geoip_longitude(), true);
}

// use Google Maps API to reverse geocode our location
function printAddress(latitude, longitude, isMaxMind) {
    // set up the Geocoder object
    var geocoder = new google.maps.Geocoder();

    // turn coordinates into an object
    var yourLocation = new google.maps.LatLng(latitude, longitude);


    // find out info about our location
    geocoder.geocode({ 'latLng': yourLocation }, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[0]) {
                $('body').append('<p>Your Address:<br />' +
                    results[0].formatted_address + '</p>');
            } else {
                error('Google did not return any results.');
            }
        } else {
            error("Reverse Geocoding failed due to: " + status);
        }
    });

    // if we used MaxMind for location, add attribution link
    if (isMaxMind) {
        $('body').append('<p><a href="http://www.maxmind.com" target="_blank">IP
            to Location Service Provided by MaxMind</a></p>');
    }
}

function error(msg) {
    alert(msg);
}
    
    
====================================
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.js">
</script>
<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    
    
====================================
<div>
    <label for="address">Enter an Address:</label>
    <input type="text" id="address" />
</div>
<div>
    <input type="button" id="go" value="Click Me To Find Latitude And Longitude"/>
</div>
    
    
====================================
$(document).ready(function () {

    // wire up button click
    $('#go').click(function () {
        // get the address the user entered
        var address = $('#address').val();
        if (address) {
            // use Google Maps API to geocode the address
            // set up the Geocoder object
            var geocoder = new google.maps.Geocoder();
            // return the coordinates
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        // print results
                        printLatLong(results[0].geometry.location.lat(),
                            results[0].geometry.location.lng());
                    } else {
                        error('Google did not return any results.');
                    }

                } else {
                    error("Reverse Geocoding failed due to: " + status);
                }
            });
        }
        else {
            error('Please enter an address');
        }
    });

});

// output lat and long
function printLatLong(lat, long) {
    $('body').append('<p>Lat: ' + lat + '</p>');
    $('body').append('<p>Long: ' + long + '</p>');
}

function error(msg) {
    alert(msg);
}
    
    
====================================
// set up the Geocoder object
var geocoder = new google.maps.Geocoder();
// return the coordinates
geocoder.geocode({ 'address': address }, function (results, status) {
...
    
    
====================================
// print results
printLatLong(results[0].geometry.location.lat(), results[0].geometry.location.lng());
    
    
====================================
<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script src="http://j.maxmind.com/app/geoip.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.js">
</script>
    
    
====================================
<div class="field">
    <label for="address">Enter a Destination Address:</label>
    <input type="text" id="address" />
</div>

<div class="field">
    <label for="units">Units:</label>
    <select id="units">
        <option value="IMPERIAL">Miles</option>
        <option value="METRIC">Kilometers</option>
    </select>
</div>

<div>
    <input type="button" id="go" value="Get Directions" />
</div>

<div id="distance"></div>

<div id="map"></div>
    
    
====================================
// Google Maps globals:
var directionRenderer;
var directionsService = new google.maps.DirectionsService();
var map;

$(document).ready(function () {

    // Set up map starting point for Google Maps.
    // Set initial coords to latitude −92 and longitude 32, which is somewhere
    // around Kansas City in the center of the US, and then set the zoom to 4
    // so the entire US is visible and centered.
    var kansas = new google.maps.LatLng(32, −92);
    var myOptions = {
        zoom: 4,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        center: kansas
    }
    map = new google.maps.Map(document.getElementById("map"), myOptions);
    directionsRenderer = new google.maps.DirectionsRenderer();
    directionsRenderer.setMap(map);

    // wire up button click
    $('#go').click(function () {
        // Use our new getLatLng with fallback and define an inline function to
        // handle the callback.
        getLatLng(function (latitude, longitude, isMaxMind) {
            // set the starting point
            var start = new google.maps.LatLng(latitude, longitude);

            // get the address the user entered
            var address = $('#address').val();
            if (address) {
                // set end point
                var end = $('#address').val();

                // set the request options
                var request = {
                    origin: start,
                    destination: end,
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                };

                // make the directions request
                directionsService.route(request, function (result, status) {
                    if (status == google.maps.DirectionsStatus.OK) {

                        // Display the directions using Google's Directions
                        // Renderer.
                        directionsRenderer.setDirections(result);

                        // output total distance separately
                        var distance = getTotalDistance(result);
                        // output either miles or km
                        var units = $('#units').val();
                        if (units == 'IMPERIAL') {
                            $('#distance').html('Total Distance: <strong>' +
                                metersToMiles(distance) + '</strong> miles');
                        } else {
                            $('#distance').html('Total Distance: <strong>' +
                                metersToKilometers(distance) + '</strong> km');
                        }

                    } else {
                        error("Directions failed due to: " + status);
                    }
                });

            }
            else {
                error('Please enter an address');
            }

            // if we used MaxMind for location, add attribution link
            if (isMaxMind) {
                $('body').append('<p><a href="http://www.maxmind.com"
                    target="_blank">IP to Location Service Provided by
                    MaxMind</a></p>');
            }
        });
    });

});

function getLatLng(callback) {
    // test for presence of geolocation
    if (navigator && navigator.geolocation) {
        // make the request for the user's position
        navigator.geolocation.getCurrentPosition(function (position) {
            // success handler
            callback(position.coords.latitude, position.coords.longitude);
        },
        function (err) {
            // handle the error by passing the callback the location from MaxMind
            callback(geoip_latitude(), geoip_longitude(), true);
        });
    } else {
        // geolocation not available, so pass the callback the location from
        // MaxMind
        callback(geoip_latitude(), geoip_longitude(), true);
    }
}

// return total distance in meters
function getTotalDistance(result) {
    var meters = 0;
    var route = result.routes[0];
    for (ii = 0; ii < route.legs.length; ii++) {
        // Google stores distance value in meters
        meters += route.legs[ii].distance.value;
    }
    return meters;
}

function metersToKilometers(meters) {
    return Math.round(meters / 1000);
}

function metersToMiles(meters) {
    // 1 mile = 1609.344 meters
    return Math.round(meters / 1609.344);
}

function error(msg) {
    alert(msg);
}
    
    
====================================
function getLatLng(callback) {
    // test for presence of geolocation
    if (navigator && navigator.geolocation) {
        // make the request for the user's position
        navigator.geolocation.getCurrentPosition(function (position) {
            // success handler
            callback(position.coords.latitude, position.coords.longitude);
        },
        function (err) {
            // handle the error by passing the callback the location from MaxMind
            callback(geoip_latitude(), geoip_longitude(), true);
        });
    } else {
        // geolocation not available, so pass the callback the location from
        // MaxMind
        callback(geoip_latitude(), geoip_longitude(), true);
    }
}
    
    
====================================
<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script src="http://j.maxmind.com/app/geoip.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.js">
</script>
<script src="http://cdn.simplegeo.com/js/1.2/simplegeo.places.jq.min.js">
</script>
    
    
====================================
// SimpleGeo globals:
var geoclient = new simplegeo.PlacesClient('REPLACE WITH YOUR API KEY');

// Google Maps globals:
var directionRenderer;
var directionsService = new google.maps.DirectionsService();
var map;

$(document).ready(function () {

    // Set up map starting point for Google Maps.
    // Set initial coords to latitude −92 and longitude 32, which is somewhere
    // around Kansas City in the center of the US, and then set the zoom to 4
    // so the entire US is visible and centered.
    var kansas = new google.maps.LatLng(32, −92);
    var myOptions = {
        zoom: 4,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        center: kansas
    }
    map = new google.maps.Map(document.getElementById("map"), myOptions);
    directionsRenderer = new google.maps.DirectionsRenderer();
    directionsRenderer.setMap(map);

    // wire up button click
    $('#go').click(function () {
        // Use our new getLatLng with fallback and define an inline function
        // to handle the callback.
        getLatLng(function (latitude, longitude, isMaxMind) {
            // use SimpleGeo to get closest Starbucks
            var query = "Starbucks";
            geoclient.search(latitude, longitude, { q: query, radius: 20,
                    num: 1 }, function (err, dataStart) {
                if (err) {
                    error(err);
                } else {
                    // We only asked for one result and SimpleGeo returns results
                    // based on distance so the closest is first, so make sure we
                    // got a result.
                    if (dataStart.features.length == 1) {
                        // save start coordinates and address
                        var startLat =
                            dataStart.features[0].geometry.coordinates[1];
                        var startLng =
                            dataStart.features[0].geometry.coordinates[0];
                        var startAddress =
                            dataStart.features[0].properties['address'];
                        // save in Google LatLng as well
                        var start = new google.maps.LatLng(startLat, startLng);

                        // look up the closest Starbucks to the one we just found
                        geoclient.search(startLat, startLng, { q: query, radius:
                                20, num: 2 }, function (err, dataEnd) {
                            if (err) {
                                error(err);
                            } else {
                                // This time we asked for two results; the first
                                // result should be the starting Starbucks,
                                // so this time access the second result.
                                if (dataEnd.features.length == 2) {
                                    // save end coordinates and address
                                    var endLat =
                                      dataEnd.features[1].geometry.coordinates[1];
                                    var endLng =
                                      dataEnd.features[1].geometry.coordinates[0];
                                    var endAddress =
                                      dataEnd.features[1].properties['address'];
                                    // save in Google LatLng as well
                                    var end = new google.maps.LatLng(endLat,
                                      endLng);

                                    // Now add directions from starting Starbucks
                                    // to ending one.
                                    // Set the request options:
                                    var request = {
                                        origin: start,
                                        destination: end,
                                        travelMode:
                                          google.maps.DirectionsTravelMode.DRIVING
                                    };

                                    // make the directions request
                                    directionsService.route(request, function
                                            (result, status) {
                                        if (status ==
                                            google.maps.DirectionsStatus.OK) {

                                            // Display the directions using
                                            // Google's Directions Renderer.
                                            directionsRenderer.
                                                setDirections(result);

                                            // output info separately
                                            $('#info').html('Closest Starbucks:
                                                <strong>' + startAddress
                                                + '</strong><br />' + 'Next
                                                Starbucks: <strong>' + endAddress
                                                + '</strong>');


                                        } else {
                                            error("Directions failed due to: " +
                                                status);
                                        }
                                    });
                                }
                                else {
                                    error('Could not find a Starbucks near ' +
                                        startAddress);
                                }
                            }
                        });

                    }
                    else {
                        error('Could not find a Starbucks near you.');
                    }
                }
            });

            // if we used MaxMind for location, add attribution link
            if (isMaxMind) {
                $('body').append('<p><a href="http://www.maxmind.com"
                    target="_blank">IP to Location Service Provided by
                    MaxMind</a></p>');
            }
        });
    });

});

function getLatLng(callback) {
    // test for presence of geolocation
    if (navigator && navigator.geolocation) {
        // make the request for the user's position
        navigator.geolocation.getCurrentPosition(function (position) {
            // success handler
            callback(position.coords.latitude, position.coords.longitude);
        },
        function (err) {
            // handle the error by passing the callback the location from MaxMind
            callback(geoip_latitude(), geoip_longitude(), true);
        });
    } else {
        // geolocation not available, so pass the callback the location from
        // MaxMind
        callback(geoip_latitude(), geoip_longitude(), true);
    }
}

function error(msg) {
    alert(msg);
}
    
    
==================